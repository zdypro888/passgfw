cmake_minimum_required(VERSION 3.10)
project(passgfw_client VERSION 1.0.0 LANGUAGES C CXX)

# 设置 C++ 标准
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 公共源文件
# Check if encrypted config exists (generated by encrypt_config.sh)
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/config_encrypted.cpp")
    message(STATUS "Using encrypted config (config_encrypted.cpp)")
    set(CONFIG_SOURCE config_encrypted.cpp)
else()
    message(STATUS "Using plaintext config (config.cpp)")
    set(CONFIG_SOURCE config.cpp)
endif()

set(COMMON_SOURCES
    ${CONFIG_SOURCE}
    firewall_detector.cpp
    passgfw.cpp
    logger.cpp
)

# 公共头文件
set(COMMON_HEADERS
    config.h
    http_interface.h
    firewall_detector.h
    passgfw.h
    logger.h
)

# 根据平台选择源文件
if(IOS)
    message(STATUS "Building for iOS")
    set(PLATFORM_SOURCES
        platform/ios/network_client_ios.mm
    )
    set(PLATFORM_HEADERS
        platform/ios/network_client_ios.h
    )

elseif(MACOS OR (APPLE AND NOT IOS))
    message(STATUS "Building for macOS")
    set(PLATFORM_SOURCES
        platform/ios/network_client_ios.mm
    )
    set(PLATFORM_HEADERS
        platform/ios/network_client_ios.h
    )
    
elseif(ANDROID)
    message(STATUS "Building for Android")
    set(PLATFORM_SOURCES
        platform/android/network_client_android.cpp
    )
    set(PLATFORM_HEADERS
        platform/android/network_client_android.h
    )
    
elseif(HARMONY)
    message(STATUS "Building for Harmony")
    set(PLATFORM_SOURCES
        platform/harmony/network_client_harmony.cpp
    )
    set(PLATFORM_HEADERS
        platform/harmony/network_client_harmony.h
    )
    
else()
    message(WARNING "Unknown platform, defaulting to iOS implementation")
    set(PLATFORM_SOURCES
        platform/ios/network_client_ios.mm
    )
    set(PLATFORM_HEADERS
        platform/ios/network_client_ios.h
    )
endif()

# 创建静态库
add_library(${PROJECT_NAME} STATIC 
    ${COMMON_SOURCES} 
    ${COMMON_HEADERS}
    ${PLATFORM_SOURCES}
    ${PLATFORM_HEADERS}
)

# 包含目录
target_include_directories(${PROJECT_NAME}
    PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}
    PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/platform
)

# 平台特定设置
if(IOS)
    # iOS 需要链接 Foundation 和 Security 框架
    target_link_libraries(${PROJECT_NAME}
        PRIVATE
            "-framework Foundation"
            "-framework Security"
    )
    
    # 启用 ARC
    target_compile_options(${PROJECT_NAME} PRIVATE
        $<$<COMPILE_LANGUAGE:OBJCXX>:-fobjc-arc>
    )
    
    # 设置为 Framework（可选）
    set_target_properties(${PROJECT_NAME} PROPERTIES
        FRAMEWORK TRUE
        FRAMEWORK_VERSION A
        MACOSX_FRAMEWORK_IDENTIFIER com.passgfw.client
        PUBLIC_HEADER "${COMMON_HEADERS}"
    )

elseif(MACOS OR (APPLE AND NOT IOS))
    # macOS needs Foundation and Security frameworks (same as iOS)
    target_link_libraries(${PROJECT_NAME}
        PRIVATE
            "-framework Foundation"
            "-framework Security"
    )
    
    # Enable ARC for Objective-C++
    target_compile_options(${PROJECT_NAME} PRIVATE
        $<$<COMPILE_LANGUAGE:OBJCXX>:-fobjc-arc>
    )
    
elseif(ANDROID)
    # Android 需要链接 log 库
    target_link_libraries(${PROJECT_NAME} PRIVATE log)
    
elseif(HARMONY)
    # 鸿蒙平台配置
    # 如果使用兼容模式，可以使用类似 Android 的配置
    target_link_libraries(${PROJECT_NAME} PRIVATE log)
    
endif()

# 编译选项
if(MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE /W4)
else()
    target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra)
endif()

# 安装规则
install(TARGETS ${PROJECT_NAME}
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    FRAMEWORK DESTINATION lib
)

install(FILES ${COMMON_HEADERS}
    DESTINATION include/passgfw
)

# 示例程序（仅在非移动平台构建）
option(BUILD_EXAMPLES "Build example programs" OFF)
if(BUILD_EXAMPLES AND NOT IOS AND NOT ANDROID AND NOT HARMONY)
    add_executable(example_test example.cpp)
    target_link_libraries(example_test ${PROJECT_NAME})
endif()

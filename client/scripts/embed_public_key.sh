#!/bin/bash

# Embed Public Key into config.cpp
# This script reads the generated public key and embeds it into config.cpp

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CLIENT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
PUBLIC_KEY_FILE="${CLIENT_ROOT}/keys/public_key.pem"
CONFIG_FILE="${CLIENT_ROOT}/config.cpp"

if [ ! -f "${PUBLIC_KEY_FILE}" ]; then
    echo "❌ Public key not found: ${PUBLIC_KEY_FILE}"
    echo "   Run ./generate_keys.sh first"
    exit 1
fi

if [ ! -f "${CONFIG_FILE}" ]; then
    echo "❌ Config file not found: ${CONFIG_FILE}"
    exit 1
fi

echo "📝 Embedding public key into config.cpp..."

# Read public key content
PUBLIC_KEY_CONTENT=$(cat "${PUBLIC_KEY_FILE}")

# Create temp file with embedded key
cat > "${CONFIG_FILE}.tmp" << 'EOF'
#include "config.h"

namespace passgfw {

std::vector<std::string> Config::GetBuiltinURLs() {
    return {
        "http://localhost:8080/passgfw",      // Local testing (HTTP)
        "http://127.0.0.1:8080/passgfw",      // Alternative local (HTTP)
        "https://example.com/passgfw?platform=mobile",
        "https://backup.example.com/check",
        // Special URL: Fetch additional URL list (ends with #)
        "https://example.com/list.txt#"
    };
}

// Public key is embedded at build time
const char* Config::GetPublicKey() {
    // AUTO-GENERATED - DO NOT EDIT MANUALLY
    // Generated by embed_public_key.sh
    static const char* PUBLIC_KEY = R"(
EOF

# Append public key content
echo "${PUBLIC_KEY_CONTENT}" >> "${CONFIG_FILE}.tmp"

# Append closing part
cat >> "${CONFIG_FILE}.tmp" << 'EOF'
)";
    
    return PUBLIC_KEY;
}

} // namespace passgfw
EOF

# Replace original file
mv "${CONFIG_FILE}.tmp" "${CONFIG_FILE}"

echo "✅ Public key embedded successfully!"
echo "   File: ${CONFIG_FILE}"


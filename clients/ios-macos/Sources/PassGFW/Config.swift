import Foundation

/// URL Entry with method, URL, and optional store flag
public struct URLEntry: Codable {
    public let method: String  // "api", "file", or "remove"
    public let url: String
    public let store: Bool     // 是否持久化存储（只对 api 和 file 有效，默认 false）

    enum CodingKeys: String, CodingKey {
        case method
        case url
        case store
    }

    public init(method: String, url: String, store: Bool = false) {
        self.method = method
        self.url = url
        self.store = store
    }

    // 自定义解码，store 字段不存在时默认为 false
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        method = try container.decode(String.self, forKey: .method)
        url = try container.decode(String.self, forKey: .url)
        store = try container.decodeIfPresent(Bool.self, forKey: .store) ?? false
    }

    // 自定义编码，store 为 false 时不输出到 JSON
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(method, forKey: .method)
        try container.encode(url, forKey: .url)
        if store {
            try container.encode(store, forKey: .store)
        }
    }
}

/// Configuration for PassGFW
struct Config {
    // MARK: - Built-in URLs and Keys
    
    // BUILD_CONFIG_START - Auto-generated by build script, DO NOT EDIT MANUALLY
    /// Get built-in URL list
    /// These URLs are generated during build from build_config.json
    static func getBuiltinURLs() -> [URLEntry] {
        return [
            URLEntry(method: "api", url: "https://server1.example.com/passgfw"),
            URLEntry(method: "api", url: "https://server2.example.com/passgfw"),
            URLEntry(method: "file", url: "https://cdn.example.com/list.txt")
        ]
    }
    
    /// Get public key (PEM format)
    /// This key is embedded during build from ../server/keys/public_key.pem
    static func getPublicKey() -> String {
        return """
        -----BEGIN PUBLIC KEY-----
        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAywXbsHaPw9FWFQXVys4a
        xABweET6hibzzAup+84Dacf3mUfGFYu6CBTuYni/x4r+WeiskiLQJSm1Bk80uWnn
        OXcNRA7/LrxhXO91A+uwRgByO3PtkSODm9MAFhSCD+HUMdlLaeokQfK+BSLxPB9K
        NzkU7HmdAVmLkqkyLxzXMg6BSK9dFoaYha/zz2ZpujCtGbk2FOSYBa+6zLFCnYer
        URr4lR/9KAXM0Jjbc/6QdAoGcCSpFDMWJEFAwPPBAYot8XnqueTXYf9BRJHVPPj/
        f9eGmPN6edFdnwdZev0a7KlxhgPIH2dBng9rPrG10vcbsf0w1+0JYI53jQB8vglG
        rwIDAQAB
        -----END PUBLIC KEY-----
        """
    }
    // BUILD_CONFIG_END
    
    // MARK: - Timeout Settings
    
    /// HTTP request timeout (seconds)
    static let requestTimeout: TimeInterval = 10
    
    /// Retry interval when all URLs fail (seconds)
    static let retryInterval: TimeInterval = 2
    
    /// Interval between URL checks (milliseconds)
    static let urlInterval: TimeInterval = 0.5
    
    // MARK: - Retry Settings
    
    /// Maximum number of retries per URL
    static let maxRetries = 3
    
    /// Delay between retries (milliseconds)
    static let retryDelay: TimeInterval = 1.0
    
    // MARK: - Security Limits
    
    /// Maximum nested list# depth
    static let maxListRecursionDepth = 5
    
    /// Random nonce size in bytes
    static let nonceSize = 32
    
    /// Maximum client_data length (RSA 2048 limit ~245 bytes for payload)
    static let maxClientDataSize = 200
}


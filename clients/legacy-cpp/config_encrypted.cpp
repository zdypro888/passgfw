// AUTO-GENERATED FILE - DO NOT EDIT
// Generated by encrypt_config.sh from config.cpp
// This file contains encrypted strings that are decrypted at runtime

#include "config.h"
#include "obfuscation.h"
#include <cstdint>

namespace passgfw {

// Obfuscation seed (generated at build time)
static const uint64_t OBFUSCATION_SEED = 0x67f3b9d8a786facULL;

// Encrypted URL data
static const uint8_t ENCRYPTED_URLS[] = {
    // URL 0: http://localhost:8080/passgfw
0x9f, 0xa9, 0xb2, 0x53, 0x55, 0x9a, 0xd4, 0x76, 0x41, 0x30, 0xba, 0x70, 
    0x12, 0x1f, 0x1e, 0xba, 0xc3, 0x2a, 0xaf, 0xb9, 0x4d, 0x6e, 0xcd, 0x8a, 
    0xd5, 0x31, 0xaf, 0xbf, 0xc5,
    // URL 1: http://127.0.0.1:8080/passgfw
0x9f, 0xa9, 0xb2, 0x53, 0x55, 0x9a, 0xd4, 0x2b, 0x1c, 0x64, 0xf5, 0x2c, 
    0x54, 0x40, 0x43, 0xff, 0xc3, 0x2a, 0xaf, 0xb9, 0x4d, 0x6e, 0xcd, 0x8a, 
    0xd5, 0x31, 0xaf, 0xbf, 0xc5,
    // URL 2: https://example.com/passgfw?platform=mobile
0x9f, 0xa9, 0xb2, 0x53, 0x1c, 0x8f, 0xd4, 0x35, 0x4b, 0x2b, 0xba, 0x71, 
    0x0a, 0x1c, 0x08, 0xe0, 0x9a, 0x7d, 0xf2, 0xae, 0x0d, 0x20, 0xce, 0x98, 
    0xc1, 0x24, 0xbf, 0xe6, 0xc2, 0x4f, 0xc3, 0x5e, 0x10, 0x20, 0xae, 0xfe, 
    0xec, 0x84, 0x4c, 0xf0, 0x2d, 0xea, 0x5c,
    // URL 3: https://backup.example.com/check
0x9f, 0xa9, 0xb2, 0x53, 0x1c, 0x8f, 0xd4, 0x35, 0x4c, 0x32, 0xb8, 0x77, 
    0x0f, 0x00, 0x43, 0xab, 0x81, 0x73, 0xf2, 0xf1, 0x11, 0x24, 0x93, 0x88, 
    0xc9, 0x2f, 0xe7, 0xba, 0xda, 0x46, 0xc1, 0x41,
    // URL 4: https://example.com/list.txt#
0x9f, 0xa9, 0xb2, 0x53, 0x1c, 0x8f, 0xd4, 0x35, 0x4b, 0x2b, 0xba, 0x71, 
    0x0a, 0x1c, 0x08, 0xe0, 0x9a, 0x7d, 0xf2, 0xae, 0x11, 0x28, 0xce, 0x9f, 
    0x88, 0x36, 0xb0, 0xad, 0x91
};

static const size_t URL_LENGTHS[] = { 29, 29, 43, 32, 29 };
static const size_t URL_OFFSETS[] = { 0, 29, 58, 101, 133 };
static const size_t URL_COUNT = 5;

std::vector<std::string> Config::GetBuiltinURLs() {
    return Obfuscation::decrypt_strings(
        ENCRYPTED_URLS,
        URL_LENGTHS,
        URL_OFFSETS,
        URL_COUNT,
        OBFUSCATION_SEED
    );
}

// Encrypted public key data
static const uint8_t ENCRYPTED_PUBLIC_KEY[] = {
    0xda, 0xf0, 0xeb, 0x0e, 0x42, 0xf7, 0xbe, 0x5d, 0x67, 0x1d, 0xfb, 0x4c, 
    0x2f, 0x32, 0x21, 0x87, 0xba, 0x32, 0xd4, 0xc4, 0x24, 0x6c, 0x90, 0xc6, 
    0x8b, 0x6f, 0xc2, 0x94, 0xfb, 0x6a, 0xe0, 0x63, 0x1c, 0x0e, 0x92, 0xd1, 
    0xb6, 0x82, 0x52, 0xfa, 0x2f, 0xef, 0x7e, 0xd2, 0x7f, 0xcc, 0x0e, 0x8e, 
    0x11, 0x39, 0xed, 0xc5, 0xbf, 0x61, 0x2e, 0x9a, 0x79, 0xed, 0x6d, 0xe9, 
    0x14, 0x84, 0x32, 0x22, 0xc8, 0x1f, 0xda, 0xda, 0x19, 0x1e, 0x90, 0xff, 
    0x28, 0x54, 0x83, 0x92, 0x52, 0x34, 0xff, 0x9b, 0x20, 0xbd, 0xd1, 0x35, 
    0xb5, 0xd7, 0xd4, 0xf8, 0x0c, 0xc1, 0xbd, 0x38, 0x70, 0xdd, 0x52, 0xec, 
    0x11, 0x4a, 0xd1, 0xfc, 0x54, 0x0f, 0x81, 0xd4, 0x3e, 0x75, 0x38, 0x05, 
    0x66, 0x9f, 0xc8, 0x51, 0xb4, 0x3e, 0xd7, 0x96, 0x5a, 0xc7, 0xff, 0xab, 
    0x43, 0x13, 0xca, 0x08, 0xfe, 0x06, 0xf2, 0x27, 0x97, 0x51, 0x44, 0x95, 
    0x84, 0x28, 0x32, 0x5c, 0x87, 0xbd, 0xb9, 0x9f, 0xb7, 0x6a, 0x80, 0x96, 
    0xf9, 0x8f, 0x55, 0x6a, 0x09, 0xf7, 0x6d, 0xc1, 0x04, 0xaf, 0xd1, 0xf3, 
    0x5b, 0xe4, 0x96, 0x6a, 0x7a, 0x4e, 0x19, 0x01, 0x52, 0xe7, 0x5f, 0x70, 
    0x36, 0x8e, 0xec, 0x7a, 0x00, 0x20, 0xc9, 0x51, 0x15, 0x30, 0x49, 0xf1, 
    0xb7, 0x99, 0x4f, 0x63, 0xd7, 0x40, 0x53, 0xbd, 0x45, 0x8f, 0x7d, 0x8e, 
    0x79, 0x6c, 0x01, 0xf3, 0x61, 0x83, 0xb4, 0xdf, 0xec, 0xee, 0xa9, 0x68, 
    0x5e, 0x72, 0x7f, 0x68, 0xdf, 0xf5, 0xcb, 0x8f, 0x46, 0x48, 0x76, 0x27, 
    0x81, 0xf7, 0xcc, 0xa3, 0xb3, 0xfd, 0x23, 0x6e, 0xdf, 0xb4, 0x86, 0xb3, 
    0x79, 0xea, 0x21, 0xb9, 0x93, 0xfd, 0x1d, 0xaf, 0xbd, 0x29, 0xd0, 0xb9, 
    0x65, 0x13, 0x24, 0x1c, 0x54, 0x0b, 0xa8, 0x1e, 0x6b, 0x85, 0xc3, 0x07, 
    0x34, 0x72, 0xe8, 0x4b, 0x76, 0x71, 0x4c, 0x6f, 0x90, 0xfd, 0x38, 0x24, 
    0x79, 0x27, 0x76, 0xde, 0x0c, 0x27, 0x7b, 0xc6, 0x8e, 0x38, 0x4f, 0x2f, 
    0x13, 0xf0, 0x2a, 0x3d, 0xd1, 0x9b, 0x9c, 0xd5, 0x2f, 0x62, 0x77, 0xda, 
    0xf5, 0x88, 0x1b, 0x13, 0xb5, 0x13, 0x3c, 0x7f, 0x90, 0xad, 0x35, 0xa3, 
    0x00, 0x92, 0xc8, 0xac, 0xce, 0x74, 0xe9, 0x48, 0xa9, 0x8b, 0x19, 0x56, 
    0x4c, 0xbb, 0xeb, 0x8e, 0x39, 0xd7, 0xda, 0xe9, 0x4c, 0x53, 0x2c, 0x6b, 
    0xa0, 0x85, 0xd5, 0x89, 0x39, 0x28, 0x7e, 0x0d, 0x7e, 0xfc, 0xd0, 0x3f, 
    0xdd, 0x5f, 0x4f, 0xf9, 0xfb, 0xea, 0xa5, 0x01, 0xdb, 0x5a, 0x7b, 0xdb, 
    0x0c, 0x62, 0x7a, 0xb6, 0x80, 0x69, 0x5e, 0xaf, 0x97, 0xb2, 0x02, 0xbb, 
    0x66, 0x06, 0xe0, 0xa4, 0xcd, 0x4a, 0x0b, 0x66, 0x3f, 0x90, 0xdd, 0x58, 
    0xfe, 0x77, 0xad, 0xe2, 0xe7, 0x52, 0xb8, 0x46, 0x05, 0xbb, 0x1f, 0x32, 
    0x44, 0xf1, 0xf9, 0x02, 0xcd, 0x52, 0x70, 0x68, 0x11, 0xd0, 0x1c, 0x24, 
    0xc9, 0x86, 0xff, 0xdb, 0x2e, 0x4a, 0x06, 0xdc, 0xc9, 0x2c, 0xe3, 0x1f, 
    0x19, 0x27, 0x52, 0xbc, 0xa2, 0x03, 0xdd, 0xfd, 0x05, 0x2e, 0x47, 0x10, 
    0xc3, 0x2d, 0x39, 0x40, 0xba, 0x20, 0xa9, 0xdb, 0x96, 0x02, 0xce, 0x46, 
    0x13, 0x4c, 0x2b, 0x45, 0xb6, 0x78, 0x13, 0x59, 0x66, 0xae, 0x33, 0x6e, 
    0x92, 0x46, 0x0f, 0x84, 0x17, 0x31, 0x4a, 0xb1, 0xf4, 0x58, 0x48, 0x06, 
    0x93, 0x92, 0x70, 0x09, 0xc9, 0x7c, 0x31, 0x7b, 0xc3, 0x45, 0x92, 0x87, 
    0xfc, 0x42, 0x90, 0x6b, 0x34, 0x99, 0xcc, 0xa0, 0xa3, 0x03, 0xb2, 0x9e, 
    0xe6, 0x99, 0x28, 0xe6
};

static const size_t PUBLIC_KEY_LENGTH = 484;

const char* Config::GetPublicKey() {
    static std::string decrypted_key = Obfuscation::decrypt_string(
        ENCRYPTED_PUBLIC_KEY,
        PUBLIC_KEY_LENGTH,
        OBFUSCATION_SEED
    );
    return decrypted_key.c_str();
}

} // namespace passgfw
